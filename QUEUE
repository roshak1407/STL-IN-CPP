Queues are a type of container adaptors that operate in a first in first out (FIFO) type of arrangement. Elements are inserted at the back (end) and are deleted from the front. Queues use an encapsulated object of deque or list (sequential container class) as its underlying container, providing a specific set of member functions to access its elements.

Method	          Definition
queue::empty()	Returns whether the queue is empty. It return true if the queue is empty otherwise returns false.
queue::size()	Returns the size of the queue.
queue::swap()	Exchange the contents of two queues but the queues must be of the same data type, although sizes may differ.
queue::emplace()	Insert a new element into the queue container, the new element is added to the end of the queue.
queue::front()	Returns a reference to the first element of the queue.
queue::back()	Returns a reference to the last element of the queue.
queue::push(g) 	Adds the element ‘g’ at the end of the queue.
queue::pop() 	Deletes the first element of the queue.


MAXIMUM HEAP
priority_queue<int>pq;

pq.push(5);//{5}
pq.push(2);//{5,2}
pq.push(8);//{8,5,2}
pq.emplace(10);//{10,8,5,2}

pq.top()//returns 10

pq.pop()//pop out 10 from queue

swap is same like others

//MINIMUM HEAP
priority_queue<int ,vector<int>,greater<int>>pq;
pq.push(5);//{5}
pq.push(2);//{2,5}
pq.push(8);//{2,5,8}
pq.emplace(10);//{2,5,8,10}

pq.top()//returns 2

********push,pop,top-->

